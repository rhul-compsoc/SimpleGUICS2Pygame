Lint
===== pep8 =====
checking setup.py
checking SimpleGUICS2Pygame/__init__.py
checking SimpleGUICS2Pygame/codeskulptor.py
checking SimpleGUICS2Pygame/codeskulptor_lib.py
checking SimpleGUICS2Pygame/numeric.py
checking SimpleGUICS2Pygame/simplegui_lib.py
checking SimpleGUICS2Pygame/simplegui_lib_draw.py
checking SimpleGUICS2Pygame/simplegui_lib_fps.py
checking SimpleGUICS2Pygame/simplegui_lib_keys.py
checking SimpleGUICS2Pygame/simplegui_lib_loader.py
checking SimpleGUICS2Pygame/simpleplot.py
checking SimpleGUICS2Pygame/example/Blackjack.py
checking SimpleGUICS2Pygame/example/Frame_example.py
checking SimpleGUICS2Pygame/example/Mandelbrot_Set.py
checking SimpleGUICS2Pygame/example/Memory.py
checking SimpleGUICS2Pygame/example/Nostalgic_Basic_Blitz.py
checking SimpleGUICS2Pygame/example/Pong.py
checking SimpleGUICS2Pygame/example/RiceRocks_Asteroids.py
checking SimpleGUICS2Pygame/example/Spaceship_prototype.py
checking SimpleGUICS2Pygame/example/Stopwatch.py
checking SimpleGUICS2Pygame/example/keys.py
checking SimpleGUICS2Pygame/example/loader.py
checking SimpleGUICS2Pygame/example/presentation.py
checking SimpleGUICS2Pygame/example/stop_example.py
checking SimpleGUICS2Pygame/script/SimpleGUICS2Pygame_check.py
checking SimpleGUICS2Pygame/script/cs2both.py
checking SimpleGUICS2Pygame/script/pygame_check.py
checking SimpleGUICS2Pygame/simpleguics2pygame/__init__.py
checking SimpleGUICS2Pygame/simpleguics2pygame/_colors.py
checking SimpleGUICS2Pygame/simpleguics2pygame/_fonts.py
checking SimpleGUICS2Pygame/simpleguics2pygame/_media.py
checking SimpleGUICS2Pygame/simpleguics2pygame/_options.py
checking SimpleGUICS2Pygame/simpleguics2pygame/_pygame_lib.py
checking SimpleGUICS2Pygame/simpleguics2pygame/canvas.py
checking SimpleGUICS2Pygame/simpleguics2pygame/control.py
checking SimpleGUICS2Pygame/simpleguics2pygame/frame.py
checking SimpleGUICS2Pygame/simpleguics2pygame/image.py
checking SimpleGUICS2Pygame/simpleguics2pygame/keys.py
checking SimpleGUICS2Pygame/simpleguics2pygame/sound.py
checking SimpleGUICS2Pygame/simpleguics2pygame/timer.py
checking SimpleGUICS2Pygame/test/test_all.py
checking SimpleGUICS2Pygame/test/test_button_label.py
checking SimpleGUICS2Pygame/test/test_circle.py
checking SimpleGUICS2Pygame/test/test_colors_constants.py
checking SimpleGUICS2Pygame/test/test_colors_html.py
checking SimpleGUICS2Pygame/test/test_colors_html_hsla.py
checking SimpleGUICS2Pygame/test/test_colors_html_rgba.py
checking SimpleGUICS2Pygame/test/test_command_line_options.py
checking SimpleGUICS2Pygame/test/test_dir.py
checking SimpleGUICS2Pygame/test/test_grid.py
checking SimpleGUICS2Pygame/test/test_image.py
checking SimpleGUICS2Pygame/test/test_input.py
checking SimpleGUICS2Pygame/test/test_line.py
checking SimpleGUICS2Pygame/test/test_numeric.py
checking SimpleGUICS2Pygame/test/test_objects.py
checking SimpleGUICS2Pygame/test/test_simpleplot_bars.py
checking SimpleGUICS2Pygame/test/test_simpleplot_lines.py
checking SimpleGUICS2Pygame/test/test_simpleplot_scatter.py
checking SimpleGUICS2Pygame/test/test_sound.py
checking SimpleGUICS2Pygame/test/test_text.py
checking SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls.py
checking SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_average.py
checking SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py
checking SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_reverse.py

===== pyflakes =====
SimpleGUICS2Pygame/simplegui_lib.py:26: 'SimpleGUICS2Pygame.simplegui_lib_draw.draw_text_side' imported but unused
SimpleGUICS2Pygame/simplegui_lib.py:26: 'SimpleGUICS2Pygame.simplegui_lib_draw.draw_rect' imported but unused
SimpleGUICS2Pygame/simplegui_lib.py:26: 'SimpleGUICS2Pygame.simplegui_lib_draw.draw_text_multi' imported but unused
SimpleGUICS2Pygame/simplegui_lib.py:28: 'SimpleGUICS2Pygame.simplegui_lib_fps.FPS' imported but unused
SimpleGUICS2Pygame/simplegui_lib.py:29: 'SimpleGUICS2Pygame.simplegui_lib_keys.Keys' imported but unused
SimpleGUICS2Pygame/simplegui_lib.py:30: 'SimpleGUICS2Pygame.simplegui_lib_loader.Loader' imported but unused
SimpleGUICS2Pygame/script/SimpleGUICS2Pygame_check.py:93: 'simplegui' imported but unused
SimpleGUICS2Pygame/script/SimpleGUICS2Pygame_check.py:108: 'simpleguitk' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:40: undefined name '_options'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:55: 'from SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:55: 'SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:58: undefined name '_pygame_lib'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:66: 'from SimpleGUICS2Pygame.simpleguics2pygame.canvas import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:66: 'SimpleGUICS2Pygame.simpleguics2pygame.canvas.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:68: 'from SimpleGUICS2Pygame.simpleguics2pygame.control import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:68: 'SimpleGUICS2Pygame.simpleguics2pygame.control.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:70: 'from SimpleGUICS2Pygame.simpleguics2pygame.frame import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:70: 'SimpleGUICS2Pygame.simpleguics2pygame.frame.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:72: 'from SimpleGUICS2Pygame.simpleguics2pygame.image import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:72: 'SimpleGUICS2Pygame.simpleguics2pygame.image.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:74: 'from SimpleGUICS2Pygame.simpleguics2pygame.keys import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:74: 'SimpleGUICS2Pygame.simpleguics2pygame.keys.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:76: 'from SimpleGUICS2Pygame.simpleguics2pygame.sound import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:76: 'SimpleGUICS2Pygame.simpleguics2pygame.sound.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:78: 'from SimpleGUICS2Pygame.simpleguics2pygame.timer import *' used; unable to detect undefined names
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:78: 'SimpleGUICS2Pygame.simpleguics2pygame.timer.*' imported but unused
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:81: undefined name 'canvas'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:86: undefined name 'control'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:91: undefined name 'frame'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:96: undefined name 'image'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:101: undefined name 'keys'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:106: undefined name 'sound'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:111: undefined name 'timer'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:117: undefined name '_colors'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:122: undefined name '_fonts'
SimpleGUICS2Pygame/simpleguics2pygame/__init__.py:127: undefined name '_media'
SimpleGUICS2Pygame/test/test_command_line_options.py:19: 'SimpleGUICS2Pygame.simpleguics2pygame as simplegui' imported but unused

===== pylint =====
************* Module SimpleGUICS2Pygame.simpleguics2pygame.frame
C:614, 8: Invalid attribute name "_background_pygame_surface_image" (invalid-name)
************* Module test_numeric
R: 83, 0: Too many local variables (31/15) (too-many-locals)
C:184, 8: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:193, 8: Invalid variable name "m2" (invalid-name)
C:211, 8: Invalid variable name "m2" (invalid-name)
C:230, 8: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:256,12: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
C:267,12: Invalid variable name "ms" (invalid-name)
C:275,12: Invalid variable name "ms" (invalid-name)
C:304, 8: Invalid variable name "m2" (invalid-name)
C:310, 8: Invalid variable name "m2" (invalid-name)
C:442, 4: Invalid variable name "mi" (invalid-name)
C:448, 4: Invalid variable name "mi" (invalid-name)
R: 83, 0: Too many branches (71/12) (too-many-branches)
R: 83, 0: Too many statements (244/50) (too-many-statements)
************* Module test_simpleplot_bars
C: 25, 0: Invalid constant name "datalist" (invalid-name)
C: 26, 0: Invalid constant name "dataset" (invalid-name)
C: 28, 0: Invalid constant name "filename" (invalid-name)
C: 34, 8: Invalid constant name "filename" (invalid-name)
************* Module test_simpleplot_lines
C: 25, 0: Invalid constant name "datalist" (invalid-name)
C: 26, 0: Invalid constant name "dataset" (invalid-name)
C: 28, 0: Invalid constant name "filename" (invalid-name)
C: 34, 8: Invalid constant name "filename" (invalid-name)
************* Module test_simpleplot_scatter
C: 25, 0: Invalid constant name "datalist" (invalid-name)
C: 26, 0: Invalid constant name "dataset" (invalid-name)
C: 28, 0: Invalid constant name "filename" (invalid-name)
C: 34, 8: Invalid constant name "filename" (invalid-name)
************* Module test_sound
C: 28, 0: Invalid constant name "sound_jump_ogg" (invalid-name)
C: 31, 4: Invalid constant name "local_sound_chirp_wav" (invalid-name)
E: 31,28: Module 'SimpleGUICS2Pygame.simpleguics2pygame' has no '_load_local_sound' member (no-member)
************* Module Stress_Balls
C: 83, 0: Missing class docstring (missing-docstring)
R: 83, 0: Too many instance attributes (12/7) (too-many-instance-attributes)
R: 84, 4: Too many arguments (7/5) (too-many-arguments)
C:106, 4: Missing method docstring (missing-docstring)
C:110, 4: Missing method docstring (missing-docstring)
C:114, 4: Missing method docstring (missing-docstring)
C:118, 4: Missing method docstring (missing-docstring)
C:129, 4: Missing method docstring (missing-docstring)
C:140, 4: Missing method docstring (missing-docstring)
C:151, 4: Missing method docstring (missing-docstring)
C:158, 4: Missing method docstring (missing-docstring)
C:165, 4: Missing method docstring (missing-docstring)
C:173, 4: Missing method docstring (missing-docstring)
C:177, 4: Missing method docstring (missing-docstring)
W:160, 8: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:168,12: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:159, 8: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
W:167,12: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
C:194, 0: Missing function docstring (missing-docstring)
C:202, 0: Missing function docstring (missing-docstring)
W:203, 4: Global variable 'balls' undefined at the module level (global-variable-undefined)
W:204, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:205, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
W:206, 4: Global variable 'nb_balls' undefined at the module level (global-variable-undefined)
W:207, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
W:208, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
W:209, 4: Using the global statement (global-statement)
W:210, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
W:222,15: Catching too general exception Exception (broad-except)
W:231,15: Catching too general exception Exception (broad-except)
W:230,16: Access to a protected member _block of a client class (protected-access)
C:257, 0: Missing function docstring (missing-docstring)
C:263, 0: Missing function docstring (missing-docstring)
C:270, 0: Missing function docstring (missing-docstring)
W:271, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
C:283, 0: Missing function docstring (missing-docstring)
W:284, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
W:293,37: Access to a protected member _get_fps_average of a client class (protected-access)
C:304, 0: Missing function docstring (missing-docstring)
W:305, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
C:310, 0: Missing function docstring (missing-docstring)
W:311, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:312, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
W:316,11: Access to a protected member _get_fps_average of a client class (protected-access)
C:326, 0: Missing function docstring (missing-docstring)
C:331, 0: Missing function docstring (missing-docstring)
C:336, 0: Missing function docstring (missing-docstring)
W:337, 4: Using the global statement (global-statement)
W:349, 0: Access to a protected member _stop_timers of a client class (protected-access)
************* Module Stress_Balls_average
W: 33, 4: Access to a protected member _hide_status of a client class (protected-access)
C: 83, 0: Missing class docstring (missing-docstring)
R: 83, 0: Too many instance attributes (12/7) (too-many-instance-attributes)
R: 84, 4: Too many arguments (7/5) (too-many-arguments)
C:106, 4: Missing method docstring (missing-docstring)
C:110, 4: Missing method docstring (missing-docstring)
C:114, 4: Missing method docstring (missing-docstring)
C:118, 4: Missing method docstring (missing-docstring)
C:129, 4: Missing method docstring (missing-docstring)
C:140, 4: Missing method docstring (missing-docstring)
C:151, 4: Missing method docstring (missing-docstring)
C:158, 4: Missing method docstring (missing-docstring)
C:165, 4: Missing method docstring (missing-docstring)
C:173, 4: Missing method docstring (missing-docstring)
C:177, 4: Missing method docstring (missing-docstring)
W:160, 8: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:168,12: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:159, 8: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
W:167,12: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
C:194, 0: Missing function docstring (missing-docstring)
C:202, 0: Missing function docstring (missing-docstring)
W:203, 4: Global variable 'balls' undefined at the module level (global-variable-undefined)
W:204, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:205, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
W:206, 4: Global variable 'nb_balls' undefined at the module level (global-variable-undefined)
W:207, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
W:208, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
W:209, 4: Using the global statement (global-statement)
W:210, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
W:222,15: Catching too general exception Exception (broad-except)
W:231,15: Catching too general exception Exception (broad-except)
W:230,16: Access to a protected member _block of a client class (protected-access)
C:257, 0: Missing function docstring (missing-docstring)
C:263, 0: Missing function docstring (missing-docstring)
C:270, 0: Missing function docstring (missing-docstring)
W:271, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
C:283, 0: Missing function docstring (missing-docstring)
W:284, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
W:293,37: Access to a protected member _get_fps_average of a client class (protected-access)
C:304, 0: Missing function docstring (missing-docstring)
W:305, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
C:310, 0: Missing function docstring (missing-docstring)
W:311, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:312, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
W:316,11: Access to a protected member _get_fps_average of a client class (protected-access)
C:326, 0: Missing function docstring (missing-docstring)
C:331, 0: Missing function docstring (missing-docstring)
C:336, 0: Missing function docstring (missing-docstring)
W:337, 4: Using the global statement (global-statement)
W:349, 0: Access to a protected member _stop_timers of a client class (protected-access)
************* Module Stress_Balls_results
W:153, 7: Catching too general exception Exception (broad-except)
R:112, 0: Redefinition of alls_nb type from set to list (redefined-variable-type)
************* Module Stress_Balls_reverse
C: 83, 0: Missing class docstring (missing-docstring)
R: 83, 0: Too many instance attributes (12/7) (too-many-instance-attributes)
R: 84, 4: Too many arguments (7/5) (too-many-arguments)
C:106, 4: Missing method docstring (missing-docstring)
C:110, 4: Missing method docstring (missing-docstring)
C:114, 4: Missing method docstring (missing-docstring)
C:118, 4: Missing method docstring (missing-docstring)
C:129, 4: Missing method docstring (missing-docstring)
C:140, 4: Missing method docstring (missing-docstring)
C:151, 4: Missing method docstring (missing-docstring)
C:158, 4: Missing method docstring (missing-docstring)
C:165, 4: Missing method docstring (missing-docstring)
C:173, 4: Missing method docstring (missing-docstring)
C:177, 4: Missing method docstring (missing-docstring)
W:160, 8: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:168,12: Attribute 'velocity_y_save' defined outside __init__ (attribute-defined-outside-init)
W:159, 8: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
W:167,12: Attribute 'velocity_x_save' defined outside __init__ (attribute-defined-outside-init)
C:194, 0: Missing function docstring (missing-docstring)
C:202, 0: Missing function docstring (missing-docstring)
W:203, 4: Global variable 'balls' undefined at the module level (global-variable-undefined)
W:204, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:205, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
W:206, 4: Global variable 'nb_balls' undefined at the module level (global-variable-undefined)
W:207, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
W:208, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
W:209, 4: Using the global statement (global-statement)
W:210, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
W:222,15: Catching too general exception Exception (broad-except)
W:231,15: Catching too general exception Exception (broad-except)
C:257, 0: Missing function docstring (missing-docstring)
C:263, 0: Missing function docstring (missing-docstring)
C:270, 0: Missing function docstring (missing-docstring)
W:271, 4: Global variable 'freezed' undefined at the module level (global-variable-undefined)
C:283, 0: Missing function docstring (missing-docstring)
W:284, 4: Global variable 'nb_frames_drawed' undefined at the module level (global-variable-undefined)
C:304, 0: Missing function docstring (missing-docstring)
W:305, 4: Global variable 'to_next_step' undefined at the module level (global-variable-undefined)
C:310, 0: Missing function docstring (missing-docstring)
W:311, 4: Global variable 'fps' undefined at the module level (global-variable-undefined)
W:312, 4: Global variable 'nb_seconds' undefined at the module level (global-variable-undefined)
C:326, 0: Missing function docstring (missing-docstring)
C:331, 0: Missing function docstring (missing-docstring)
C:336, 0: Missing function docstring (missing-docstring)
W:337, 4: Using the global statement (global-statement)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._media -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.image) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._media -> SimpleGUICS2Pygame.simpleguics2pygame.sound) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame -> SimpleGUICS2Pygame.simpleguics2pygame._options -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.control -> SimpleGUICS2Pygame.simpleguics2pygame._fonts) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._colors -> SimpleGUICS2Pygame.simpleguics2pygame.frame) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._colors -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.control) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._colors -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.canvas) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame -> SimpleGUICS2Pygame.simpleguics2pygame._options -> SimpleGUICS2Pygame.simpleguics2pygame.sound -> SimpleGUICS2Pygame.simpleguics2pygame._media -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.control -> SimpleGUICS2Pygame.simpleguics2pygame._fonts) (cyclic-import)
R:  1, 0: Cyclic import (SimpleGUICS2Pygame.simpleguics2pygame._fonts -> SimpleGUICS2Pygame.simpleguics2pygame.frame -> SimpleGUICS2Pygame.simpleguics2pygame.control) (cyclic-import)
R:  1, 0: Similar lines in 2 files
==Stress_Balls:42
==Stress_Balls_reverse:42
_FPS_AVERAGE = False

# Number of balls of each step
list_nb_balls = [1, 10, 20, 30, 40, 50, 75,
                 100, 200, 300, 400, 500, 750,
                 1000, 1500, 2000]
# ### <<< config

if REVERSE:
    list_nb_balls.reverse()


FONT_SIZE = 40

WIDTH = 599
HEIGHT = 407

RGB_COLORS = ((0, 0, 128),
              (0, 0, 255),
              (0, 128, 0),
              (0, 128, 128),
              (0, 255, 0),
              (0, 255, 255),
              (128, 0, 0),
              (128, 0, 128),
              (128, 128, 0),
              (128, 128, 128),
              (192, 192, 192),
              (255, 0, 0),
              (255, 0, 255),
              (255, 165, 0),
              (255, 255, 0),
              (255, 255, 255))


results = {}

transparency = ALPHA


class Ball:
    def __init__(self, center, radius, color, fill_color, velocity, shape):
        self.center_x = center[0]
        self.center_y = center[1]

        self.radius = radius

        self.color_rgba = color
        self.color = rgba_to_str(color)

        self.fill_color_rgba = fill_color
        self.fill_color = rgba_to_str(fill_color)

        self.velocity_x = velocity[0]
        self.velocity_y = velocity[1]

        self.draw = (self.draw_circle,
                     self.draw_disc,
                     self.draw_disc_border,
                     self.draw_square,
                     self.draw_squarefill,
                     self.draw_squarefill_border)[shape]

    def draw_circle(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 2, self.color)

    def draw_disc(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 1, self.color, self.color)

    def draw_disc_border(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 2, self.color, self.fill_color)

    def draw_square(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            2, self.color)

    def draw_squarefill(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            1, self.color, self.color)

    def draw_squarefill_border(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            2, self.color, self.fill_color)

    def freeze_off(self):
        self.velocity_x = self.velocity_x_save
        self.velocity_y = self.velocity_y_save

        del self.velocity_x_save
        del self.velocity_y_save

    def freeze_on(self):
        self.velocity_x_save = self.velocity_x
        self.velocity_y_save = self.velocity_y

        self.velocity_x = 0
        self.velocity_y = 0

    def revert(self):
        if freezed:
            self.velocity_x_save = -self.velocity_x_save
            self.velocity_y_save = -self.velocity_y_save
        else:
            self.velocity_x = -self.velocity_x
            self.velocity_y = -self.velocity_y

    def transparency_reset(self):
        self.color = rgba_to_str(self.color_rgba)
        self.fill_color = rgba_to_str(self.fill_color_rgba)

    def move(self):
        self.center_x += self.velocity_x

        if self.center_x <= self.radius:
            self.velocity_x = abs(self.velocity_x)
        elif self.center_x >= WIDTH - 1 - self.radius:
            self.velocity_x = -abs(self.velocity_x)

        self.center_y += self.velocity_y

        if self.center_y <= self.radius:
            self.velocity_y = abs(self.velocity_y)
        elif self.center_y > HEIGHT - 1 - self.radius:
            self.velocity_y = -abs(self.velocity_y)


# Functions
def dict_to_ordered_list(d):
    l = list(d.keys())
    l.sort()

    return [(nb_balls, d[nb_balls])
            for nb_balls in l]


def init():
    global balls
    global fps
    global freezed
    global nb_balls
    global nb_frames_drawed
    global nb_seconds
    global results
    global to_next_step

    if len(list_nb_balls) == 0:
        timer.stop()

        results = dict_to_ordered_list(results)

        print('Results: {' + ', '
              .join(['%d: %d' % result for result in results]) + '}')

        try:
            frame.stop()
        except Exception as e:  # to avoid simpleguitk failed
            print('frame.stop():' + str(e))

        try:
            simpleplot.plot_lines('Stress Balls', 800, 650,
                                  '# balls', 'FPS',
                                  (results, ), True)
            if SIMPLEGUICS2PYGAME:
                simpleplot._block()
        except Exception as e:  # to avoid fail if no simpleplot
            print('simpleplot.plot_lines():' + str(e))

        return

    if list_nb_balls:
        nb_balls = list_nb_balls.pop(0)

    fps = 0
    freezed = False
    nb_frames_drawed = 0
    nb_seconds = 0
    to_next_step = False

    balls = tuple([Ball([47 + n % (WIDTH - 100),
                         47 + n % (HEIGHT - 100)],  # position
                        19 + n % 11,  # radius
                        n_to_rgba((n + 1) % len(RGB_COLORS),
                                  .2 + float(n % 13) / 15),  # color of border
                        n_to_rgba((n + 2) % len(RGB_COLORS),
                                  .2 + float((n + 3) % 14) / 17),  # fill color
                        [3 + n % 7, 2 + n % 5],  # velocity
                        (n + 2) % 6)  # shape
                   for n in range(nb_balls)])


def n_to_rgba(n, alpha):
    n = RGB_COLORS[n]

    return (n[0], n[1], n[2], alpha)


def rgba_to_str(rgba):
    # %f failed on CodeSkulptor
    return ('rgba(%d, %d, %d, %s)' % rgba if transparency
            else 'rgba(%d, %d, %d, 1)' % rgba[:3])


# Handler
def freeze_on_off():
    global freezed

    if freezed:
        for ball in balls:
            ball.freeze_off()
    else:
        for ball in balls:
            ball.freeze_on()

    freezed = not freezed


def draw(canvas):
    global nb_frames_drawed

    for ball in balls:
        ball.draw(canvas)
        ball.move()

    nb_frames_drawed += 1

    s = '#%d | %d FPS' % (nb_balls,
                          (int(round(frame._get_fps_average())) if _FPS_AVERAGE
                           else fps))
    canvas.draw_text(s, (12, 13 + FONT_SIZE * 3 // 4), FONT_SIZE, 'Gray')
    canvas.draw_text(s, (10, 10 + FONT_SIZE * 3 // 4), FONT_SIZE, 'White')

    s = '%ds' % (MAX_NB_SECONDS - nb_seconds)
    x = WIDTH - 11 - frame.get_canvas_textwidth(s, FONT_SIZE)
    canvas.draw_text(s, (x - 2, 13 + FONT_SIZE * 3 // 4), FONT_SIZE, 'Gray')
    canvas.draw_text(s, (x, 10 + FONT_SIZE * 3 // 4), FONT_SIZE, 'White')


def next_step():
    global to_next_step

    to_next_step = True


def print_fps():
    global fps
    global nb_seconds

    nb_seconds += 1

    fps = (frame._get_fps_average() if _FPS_AVERAGE
           else int(round(float(nb_frames_drawed) / nb_seconds)))

    if (nb_seconds > MAX_NB_SECONDS) or to_next_step:
        print('%d | %d' % (nb_balls, fps))
        results[nb_balls] = fps

        init()


def revert():
    for ball in balls:
        ball.revert()


def stop():
    timer.stop()
    frame.stop()


def transparency_on_off():
    global transparency

    transparency = not transparency

    for ball in balls:
        ball.transparency_reset()


# Main
print("""Stress Balls:
# balls | FPS...""")

simplegui.Frame._stop_timers = True

frame = simplegui.create_frame('Stress Balls' +
                               (' ALPHA' if ALPHA
                                else '') +
                               (' REVERSE' if REVERSE
                                else '') +
                               (' _FPS_AVERAGE' if _FPS_AVERAGE
                                else ''),
                               WIDTH, HEIGHT)

frame.add_button('Un/Freeze', freeze_on_off)
frame.add_button('Revert', revert)
frame.add_button('Without/With transparency', transparency_on_off)
frame.add_button('Next step', next_step)
frame.add_label('')
frame.add_button('Quit', stop)

init()

frame.set_draw_handler(draw)

timer = simplegui.create_timer(1000, print_fps)
timer.start()

frame.start() (duplicate-code)
R:  1, 0: Similar lines in 3 files
==Stress_Balls:45
==Stress_Balls_average:45
==Stress_Balls_reverse:45
list_nb_balls = [1, 10, 20, 30, 40, 50, 75,
                 100, 200, 300, 400, 500, 750,
                 1000, 1500, 2000]
# ### <<< config

if REVERSE:
    list_nb_balls.reverse()


FONT_SIZE = 40

WIDTH = 599
HEIGHT = 407

RGB_COLORS = ((0, 0, 128),
              (0, 0, 255),
              (0, 128, 0),
              (0, 128, 128),
              (0, 255, 0),
              (0, 255, 255),
              (128, 0, 0),
              (128, 0, 128),
              (128, 128, 0),
              (128, 128, 128),
              (192, 192, 192),
              (255, 0, 0),
              (255, 0, 255),
              (255, 165, 0),
              (255, 255, 0),
              (255, 255, 255))


results = {}

transparency = ALPHA


class Ball:
    def __init__(self, center, radius, color, fill_color, velocity, shape):
        self.center_x = center[0]
        self.center_y = center[1]

        self.radius = radius

        self.color_rgba = color
        self.color = rgba_to_str(color)

        self.fill_color_rgba = fill_color
        self.fill_color = rgba_to_str(fill_color)

        self.velocity_x = velocity[0]
        self.velocity_y = velocity[1]

        self.draw = (self.draw_circle,
                     self.draw_disc,
                     self.draw_disc_border,
                     self.draw_square,
                     self.draw_squarefill,
                     self.draw_squarefill_border)[shape]

    def draw_circle(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 2, self.color)

    def draw_disc(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 1, self.color, self.color)

    def draw_disc_border(self, canvas):
        canvas.draw_circle((self.center_x, self.center_y),
                           self.radius, 2, self.color, self.fill_color)

    def draw_square(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            2, self.color)

    def draw_squarefill(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            1, self.color, self.color)

    def draw_squarefill_border(self, canvas):
        canvas.draw_polygon(((self.center_x - self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y - self.radius),
                             (self.center_x + self.radius,
                              self.center_y + self.radius),
                             (self.center_x - self.radius,
                              self.center_y + self.radius)),
                            2, self.color, self.fill_color)

    def freeze_off(self):
        self.velocity_x = self.velocity_x_save
        self.velocity_y = self.velocity_y_save

        del self.velocity_x_save
        del self.velocity_y_save

    def freeze_on(self):
        self.velocity_x_save = self.velocity_x
        self.velocity_y_save = self.velocity_y

        self.velocity_x = 0
        self.velocity_y = 0

    def revert(self):
        if freezed:
            self.velocity_x_save = -self.velocity_x_save
            self.velocity_y_save = -self.velocity_y_save
        else:
            self.velocity_x = -self.velocity_x
            self.velocity_y = -self.velocity_y

    def transparency_reset(self):
        self.color = rgba_to_str(self.color_rgba)
        self.fill_color = rgba_to_str(self.fill_color_rgba)

    def move(self):
        self.center_x += self.velocity_x

        if self.center_x <= self.radius:
            self.velocity_x = abs(self.velocity_x)
        elif self.center_x >= WIDTH - 1 - self.radius:
            self.velocity_x = -abs(self.velocity_x)

        self.center_y += self.velocity_y

        if self.center_y <= self.radius:
            self.velocity_y = abs(self.velocity_y)
        elif self.center_y > HEIGHT - 1 - self.radius:
            self.velocity_y = -abs(self.velocity_y)


# Functions
def dict_to_ordered_list(d):
    l = list(d.keys())
    l.sort()

    return [(nb_balls, d[nb_balls])
            for nb_balls in l]


def init():
    global balls
    global fps
    global freezed
    global nb_balls
    global nb_frames_drawed
    global nb_seconds
    global results
    global to_next_step

    if len(list_nb_balls) == 0:
        timer.stop()

        results = dict_to_ordered_list(results)

        print('Results: {' + ', '
              .join(['%d: %d' % result for result in results]) + '}')

        try:
            frame.stop()
        except Exception as e:  # to avoid simpleguitk failed
            print('frame.stop():' + str(e))

        try:
            simpleplot.plot_lines('Stress Balls', 800, 650,
                                  '# balls', 'FPS',
                                  (results, ), True)
            if SIMPLEGUICS2PYGAME:
                simpleplot._block()
        except Exception as e:  # to avoid fail if no simpleplot
            print('simpleplot.plot_lines():' + str(e))

        return

    if list_nb_balls:
        nb_balls = list_nb_balls.pop(0)

    fps = 0
    freezed = False
    nb_frames_drawed = 0
    nb_seconds = 0
    to_next_step = False

    balls = tuple([Ball([47 + n % (WIDTH - 100),
                         47 + n % (HEIGHT - 100)],  # position
                        19 + n % 11,  # radius
                        n_to_rgba((n + 1) % len(RGB_COLORS),
                                  .2 + float(n % 13) / 15),  # color of border
                        n_to_rgba((n + 2) % len(RGB_COLORS),
                                  .2 + float((n + 3) % 14) / 17),  # fill color
                        [3 + n % 7, 2 + n % 5],  # velocity
                        (n + 2) % 6)  # shape
                   for n in range(nb_balls)])


def n_to_rgba(n, alpha):
    n = RGB_COLORS[n]

    return (n[0], n[1], n[2], alpha)


def rgba_to_str(rgba):
    # %f failed on CodeSkulptor
    return ('rgba(%d, %d, %d, %s)' % rgba if transparency
            else 'rgba(%d, %d, %d, 1)' % rgba[:3])


# Handler
def freeze_on_off():
    global freezed

    if freezed:
        for ball in balls:
            ball.freeze_off()
    else:
        for ball in balls:
            ball.freeze_on()

    freezed = not freezed


def draw(canvas):
    global nb_frames_drawed

    for ball in balls:
        ball.draw(canvas)
        ball.move()

    nb_frames_drawed += 1

    s = '#%d | %d FPS' % (nb_balls,
                          (int(round(frame._get_fps_average())) if _FPS_AVERAGE
                           else fps))
    canvas.draw_text(s, (12, 13 + FONT_SIZE * 3 // 4), FONT_SIZE, 'Gray')
    canvas.draw_text(s, (10, 10 + FONT_SIZE * 3 // 4), FONT_SIZE, 'White')

    s = '%ds' % (MAX_NB_SECONDS - nb_seconds)
    x = WIDTH - 11 - frame.get_canvas_textwidth(s, FONT_SIZE)
    canvas.draw_text(s, (x - 2, 13 + FONT_SIZE * 3 // 4), FONT_SIZE, 'Gray')
    canvas.draw_text(s, (x, 10 + FONT_SIZE * 3 // 4), FONT_SIZE, 'White')


def next_step():
    global to_next_step

    to_next_step = True


def print_fps():
    global fps
    global nb_seconds

    nb_seconds += 1

    fps = (frame._get_fps_average() if _FPS_AVERAGE
           else int(round(float(nb_frames_drawed) / nb_seconds)))

    if (nb_seconds > MAX_NB_SECONDS) or to_next_step:
        print('%d | %d' % (nb_balls, fps))
        results[nb_balls] = fps

        init()


def revert():
    for ball in balls:
        ball.revert()


def stop():
    timer.stop()
    frame.stop()


def transparency_on_off():
    global transparency

    transparency = not transparency

    for ball in balls:
        ball.transparency_reset()


# Main
print("""Stress Balls:
# balls | FPS...""")

simplegui.Frame._stop_timers = True

frame = simplegui.create_frame('Stress Balls' +
                               (' ALPHA' if ALPHA
                                else '') +
                               (' REVERSE' if REVERSE
                                else '') +
                               (' _FPS_AVERAGE' if _FPS_AVERAGE
                                else ''),
                               WIDTH, HEIGHT)

frame.add_button('Un/Freeze', freeze_on_off)
frame.add_button('Revert', revert)
frame.add_button('Without/With transparency', transparency_on_off)
frame.add_button('Next step', next_step)
frame.add_label('')
frame.add_button('Quit', stop)

init()

frame.set_draw_handler(draw)

timer = simplegui.create_timer(1000, print_fps)
timer.start()

frame.start() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_colors_html_hsla:80
==test_colors_html_rgba:81
                                             else 1)))


def switch_transparency():
    """
    Switch between transparency mode and opaque mode.
    """
    global STATE_TRANSPARENCY  # pylint: disable=global-statement

    STATE_TRANSPARENCY = not STATE_TRANSPARENCY


#
# Main
######
def main():
    """Create and start frame."""
    frame = simplegui.create_frame(TEST, WIDTH, HEIGHT)

    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('')
    frame.add_button('Switch transparency', switch_transparency)
    frame.add_label('')
    frame.add_button('Quit', frame.stop)

    frame.set_draw_handler(draw)

    if SIMPLEGUICS2PYGAME:
        from sys import argv

        if len(argv) == 2:
            frame._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access

    frame.start()

if __name__ == '__main__':
    main() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:26
==Spaceship_prototype:23
import math
import random

try:
    from user38_ZmhOVHGm2lhVRhk import assert_position
    from user33_Bhc7VzXKbXGVQV1 import FPS
    from user40_nMs7JxzimyImAv2 import Loader

    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError:
    from SimpleGUICS2Pygame.codeskulptor_lib import assert_position
    from SimpleGUICS2Pygame.simplegui_lib_fps import FPS
    from SimpleGUICS2Pygame.simplegui_lib_loader import Loader

    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access
    simplegui.Frame._keep_timers = False  # pylint: disable=protected-access

    SIMPLEGUICS2PYGAME = True


#
# Global constants
###################
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600


#
# Global variables
###################
FRAME = None
 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==test_button_label:14
==test_circle:13
==test_colors_constants:13
==test_grid:13
==test_input:14
==test_line:13
try:
    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


if SIMPLEGUICS2PYGAME:
    from sys import version as python_version
    from pygame.version import ver as pygame_version
    from SimpleGUICS2Pygame import _VERSION as GUI_VERSION  # noqa  # pylint: disable=ungrouped-imports

    PYTHON_VERSION = 'Python ' + python_version.split()[0]
    PYGAME_VERSION = 'Pygame ' + pygame_version
    GUI_VERSION = 'SimpleGUICS2Pygame ' + GUI_VERSION
else:
    PYTHON_VERSION = 'CodeSkulptor'  # http://www.codeskulptor.org/
    PYGAME_VERSION = ''
    GUI_VERSION = 'simplegui'

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_circle:69
==test_colors_html:79
def main():
    """Create and start frame."""
    frame = simplegui.create_frame(TEST, WIDTH, HEIGHT)

    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('')
    frame.add_button('Quit', frame.stop)

    frame.set_draw_handler(draw)

    if SIMPLEGUICS2PYGAME:
        from sys import argv

        if len(argv) == 2:
            frame._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access

    frame.start()

if __name__ == '__main__':
    main() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_simpleplot_bars:13
==test_simpleplot_scatter:13
try:
    import simplegui  # to avoid other simpleplot available in Python
    import simpleplot

    SIMPLEGUICS2PYGAME = not bool(simplegui)  # False
except ImportError:
    import SimpleGUICS2Pygame.simpleplot as simpleplot

    SIMPLEGUICS2PYGAME = bool(simpleplot)  # True


datalist = [(1, 2), (2, 3), (5, 4), (8, 3), (9, 2)]
dataset = {1: 3, 2: 4, 5: 5, 8: 4, 9: 3}

filename = None

if SIMPLEGUICS2PYGAME:
    from sys import argv

    if len(argv) == 2:
        filename = argv[1]

if filename is None: (duplicate-code)
R:  1, 0: Similar lines in 3 files
==test_simpleplot_bars:13
==test_simpleplot_lines:13
==test_simpleplot_scatter:13
try:
    import simplegui  # to avoid other simpleplot available in Python
    import simpleplot

    SIMPLEGUICS2PYGAME = not bool(simplegui)  # False
except ImportError:
    import SimpleGUICS2Pygame.simpleplot as simpleplot

    SIMPLEGUICS2PYGAME = bool(simpleplot)  # True


datalist = [(1, 2), (2, 3), (5, 4), (8, 3), (9, 2)]
dataset = {1: 3, 2: 4, 5: 5, 8: 4, 9: 3}

filename = None

if SIMPLEGUICS2PYGAME:
    from sys import argv

    if len(argv) == 2:
        filename = argv[1]
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:691
==Spaceship_prototype:154
    def get_lifespan(self):
        """
        Return lifespan of image.

        :return: None or ((int or float) > 0)
        """
        return self._lifespan

    def get_radius(self):
        """
        Return radius of image.

        :return: (int or float) > 0
        """
        return self._radius

    def get_size(self):
        """
        Return size of image.

        :return: [(int or float) > 0, (int or float) > 0]
        """ (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Stress_Balls:21
==Stress_Balls_average:21
try:
    import simplegui
    import simpleplot

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui
    import SimpleGUICS2Pygame.simpleplot as simpleplot

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


# ### Config >>>
MAX_NB_SECONDS = 30  # number of seconds before next step

ALPHA = False  # start with transparency if True
REVERSE = False  # reverse list_nb_balls if true

# Use Frame._get_fps_average() (only with SimpleGUICS2Pygame) (duplicate-code)
R:  1, 0: Similar lines in 10 files
==test_button_label:19
==test_circle:18
==test_colors_constants:18
==test_colors_html:22
==test_colors_html_hsla:25
==test_colors_html_rgba:22
==test_grid:18
==test_input:19
==test_line:18
==test_text:23
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


if SIMPLEGUICS2PYGAME:
    from sys import version as python_version
    from pygame.version import ver as pygame_version
    from SimpleGUICS2Pygame import _VERSION as GUI_VERSION  # noqa  # pylint: disable=ungrouped-imports

    PYTHON_VERSION = 'Python ' + python_version.split()[0]
    PYGAME_VERSION = 'Pygame ' + pygame_version
    GUI_VERSION = 'SimpleGUICS2Pygame ' + GUI_VERSION
else:
    PYTHON_VERSION = 'CodeSkulptor'  # http://www.codeskulptor.org/
    PYGAME_VERSION = ''
    GUI_VERSION = 'simplegui'

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SimpleGUICS2Pygame_check:67
==pygame_check:31
    CMD = 'import pygame'
    try:
        import pygame

        print(CMD, 'ok - Version', pygame.version.ver)

        CMD = 'pygame.init()'
        try:
            SUCCESS, FAILED = pygame.init()  # pylint: disable=no-member

            if FAILED == 0:
                print(' ', CMD, SUCCESS, 'modules loaded ok')
            else:
                print(' ', CMD, SUCCESS, 'modules loaded',
                      FAILED, 'failed WARNING!')
        except Exception as exc:  # pylint: disable=broad-except
            print(' ', CMD, 'FAILED!', exc)
    except Exception as exc:  # pylint: disable=broad-except
        print(CMD, 'FAILED!', exc) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Blackjack:108
==SimpleGUICS2Pygame.simplegui_lib_draw:51
    assert isinstance(line_width, int) or isinstance(line_width, float), \
        type(line_width)
    assert line_width >= 0, line_width
    assert isinstance(line_color, str), type(str)
    assert (fill_color is None) or isinstance(fill_color, str), type(str)

    x0 = pos[0]
    y0 = pos[1]

    width = size[0] - 1
    height = size[1] - 1

    canvas.draw_polygon(((x0, y0),
                         (x0 + width, y0),
                         (x0 + width, y0 + height),
                         (x0, y0 + height)),
                        line_width, line_color, fill_color)

 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==Stress_Balls:21
==Stress_Balls_average:21
==Stress_Balls_reverse:21
try:
    import simplegui
    import simpleplot

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui
    import SimpleGUICS2Pygame.simpleplot as simpleplot

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


# ### Config >>>
MAX_NB_SECONDS = 30  # number of seconds before next step

ALPHA = False  # start with transparency if True (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Frame_example:26
==stop_example:33
def draw(canvas):
    """
    Draw a simple text.

    :param canvas: simplegui.Canvas
    """
    text = 'Canvas'

    font_size = 40
    text_width = FRAME.get_canvas_textwidth(text, font_size)

    canvas.draw_text(text,
                     ((CANVAS_WIDTH - text_width) // 2,
                      CANVAS_HEIGHT // 2 + font_size // 4),
                     font_size, 'Green')

 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==test_colors_html_hsla:106
==test_colors_html_rgba:107
==test_line:109
    frame.add_label('')
    frame.add_button('Quit', frame.stop)

    frame.set_draw_handler(draw)

    if SIMPLEGUICS2PYGAME:
        from sys import argv

        if len(argv) == 2:
            frame._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access

    frame.start()

if __name__ == '__main__':
    main() (duplicate-code)
R:  1, 0: Similar lines in 5 files
==test_circle:79
==test_colors_html:89
==test_colors_html_hsla:107
==test_colors_html_rgba:108
==test_line:110
    frame.add_button('Quit', frame.stop)

    frame.set_draw_handler(draw)

    if SIMPLEGUICS2PYGAME:
        from sys import argv

        if len(argv) == 2:
            frame._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access

    frame.start()

if __name__ == '__main__':
    main() (duplicate-code)
R:  1, 0: Similar lines in 7 files
==test_button_label:14
==test_circle:13
==test_colors_constants:13
==test_grid:13
==test_input:14
==test_line:13
==test_objects:13
try:
    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


if SIMPLEGUICS2PYGAME:
    from sys import version as python_version (duplicate-code)
R:  1, 0: Similar lines in 11 files
==test_button_label:26
==test_circle:25
==test_colors_constants:25
==test_colors_html:29
==test_colors_html_hsla:32
==test_colors_html_rgba:29
==test_grid:25
==test_image:34
==test_input:26
==test_line:25
==test_text:30
if SIMPLEGUICS2PYGAME:
    from sys import version as python_version
    from pygame.version import ver as pygame_version
    from SimpleGUICS2Pygame import _VERSION as GUI_VERSION  # noqa  # pylint: disable=ungrouped-imports

    PYTHON_VERSION = 'Python ' + python_version.split()[0]
    PYGAME_VERSION = 'Pygame ' + pygame_version
    GUI_VERSION = 'SimpleGUICS2Pygame ' + GUI_VERSION
else:
    PYTHON_VERSION = 'CodeSkulptor'  # http://www.codeskulptor.org/
    PYGAME_VERSION = ''
    GUI_VERSION = 'simplegui'

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_colors_constants:83
==test_grid:180
FRAME.add_button('Quit', FRAME.stop)

FRAME.set_draw_handler(draw)

if SIMPLEGUICS2PYGAME:
    from sys import argv

    if len(argv) == 2:
        FRAME._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access


FRAME.start() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:993
==test_image:128
def fps_on_off():
    """
    Active or inactive the calculation and drawing of FPS.
    """
    if FPS_DRAWER.is_started():
        FPS_DRAWER.stop()
        BUTTON_FPS.set_text('FPS on')
    else:
        FPS_DRAWER.start()
        BUTTON_FPS.set_text('FPS off')

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_dir:28
==test_numeric:20
    SIMPLEGUICS2PYGAME = True


if SIMPLEGUICS2PYGAME:
    from sys import version as python_version

    PYTHON_VERSION = 'Python ' + python_version.split()[0]
else:
    PYTHON_VERSION = 'CodeSkulptor'  # http://www.codeskulptor.org/

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SimpleGUICS2Pygame.simpleguics2pygame.image:24
==SimpleGUICS2Pygame.simpleguics2pygame.sound:24
try:
    import pygame

    _PYGAME_AVAILABLE = bool(pygame)  # True
except ImportError:
    _PYGAME_AVAILABLE = False


#
# "Private" function
#################### (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Blackjack:16
==Pong:17
import random

try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access
    simplegui.Frame._keep_timers = False  # pylint: disable=protected-access

 (duplicate-code)
R:  1, 0: Similar lines in 5 files
==test_circle:69
==test_colors_html:79
==test_colors_html_hsla:95
==test_colors_html_rgba:96
==test_line:97
def main():
    """Create and start frame."""
    frame = simplegui.create_frame(TEST, WIDTH, HEIGHT)

    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('') (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_button_label:57
==test_input:76
    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('')
    frame.add_button('Quit', frame.stop)
    frame.add_label('')

    # Buttons (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:641
==Spaceship_prototype:118
        assert_position(center)
        assert_position(size, True, True)
        assert ((radius is None) or
                ((isinstance(radius, int) or isinstance(radius, float)) and
                 (radius > 0))), radius
        assert ((lifespan is None) or
                ((isinstance(lifespan, int) or isinstance(lifespan, float)) and
                 (lifespan > 0))), lifespan
        assert isinstance(animated, bool), type(animated)
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Blackjack:18
==Stopwatch:17
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access
    simplegui.Frame._keep_timers = False  # pylint: disable=protected-access


# Global constants (duplicate-code)
R:  1, 0: Similar lines in 5 files
==test_colors_html:22
==test_colors_html_hsla:25
==test_colors_html_rgba:22
==test_objects:18
==test_text:23
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    SIMPLEGUICS2PYGAME = True

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access


if SIMPLEGUICS2PYGAME:
    from sys import version as python_version (duplicate-code)
R:  1, 0: Similar lines in 3 files
==test_colors_constants:85
==test_grid:182
==test_image:149
    FRAME.set_draw_handler(draw)

    if SIMPLEGUICS2PYGAME:
        from sys import argv

        if len(argv) == 2:
            FRAME._save_canvas_and_stop(argv[1])  # noqa  # pylint: disable=protected-access

 (duplicate-code)
R:  1, 0: Similar lines in 8 files
==test_button_label:14
==test_circle:13
==test_colors_constants:13
==test_grid:13
==test_input:14
==test_line:13
==test_objects:13
==test_sound:15
try:
    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    SIMPLEGUICS2PYGAME = True
 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==SimpleGUICS2Pygame.simpleguics2pygame.control:22
==SimpleGUICS2Pygame.simpleguics2pygame.frame:24
try:
    import pygame

    _PYGAME_AVAILABLE = True
except ImportError:
    _PYGAME_AVAILABLE = False

from SimpleGUICS2Pygame.simpleguics2pygame._colors import _SIMPLEGUICOLOR_TO_PYGAMECOLOR  # noqa  # pylint: disable=no-name-in-module
 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==Blackjack:18
==Pong:19
==Stopwatch:17
==stop_example:13
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access
    simplegui.Frame._keep_timers = False  # pylint: disable=protected-access

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Pong:19
==Stopwatch:17
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access
    simplegui.Frame._keep_timers = False  # pylint: disable=protected-access

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_colors_constants:75
==test_grid:169
FRAME = simplegui.create_frame(TEST, WIDTH, HEIGHT)

FRAME.add_label(TEST)
FRAME.add_label('')
FRAME.add_label(PYTHON_VERSION)
FRAME.add_label(GUI_VERSION)
FRAME.add_label(PYGAME_VERSION)
FRAME.add_label('') (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Frame_example:14
==Nostalgic_Basic_Blitz:20
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access

 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==Blackjack:16
==Nostalgic_Basic_Blitz:18
==Pong:17
import random

try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access (duplicate-code)
R:  1, 0: Similar lines in 2 files
==Blackjack:553
==Memory:412
FRAME.add_label('')
FRAME.add_button('Quit', FRAME.stop)

# Register event handlers
FRAME.set_draw_handler(draw_wait_images)

TIMER = simplegui.create_timer(100, test_images_loaded)
TIMER.start() (duplicate-code)
R:  1, 0: Similar lines in 12 files
==test_button_label:33
==test_circle:32
==test_colors_constants:32
==test_colors_html:36
==test_colors_html_hsla:39
==test_colors_html_rgba:36
==test_grid:32
==test_image:41
==test_input:33
==test_line:32
==test_objects:32
==test_text:37
    GUI_VERSION = 'SimpleGUICS2Pygame ' + GUI_VERSION
else:
    PYTHON_VERSION = 'CodeSkulptor'  # http://www.codeskulptor.org/
    PYGAME_VERSION = ''
    GUI_VERSION = 'simplegui'

 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==test_button_label:57
==test_circle:73
==test_colors_html:83
==test_input:76
    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('')
    frame.add_button('Quit', frame.stop) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==SimpleGUICS2Pygame.simpleguics2pygame._options:22
==SimpleGUICS2Pygame.simpleguics2pygame.canvas:26
==SimpleGUICS2Pygame.simpleguics2pygame.control:22
==SimpleGUICS2Pygame.simpleguics2pygame.frame:24
try:
    import pygame

    _PYGAME_AVAILABLE = True
except ImportError:
    _PYGAME_AVAILABLE = False
 (duplicate-code)
R:  1, 0: Similar lines in 9 files
==presentation:16
==test_button_label:14
==test_circle:13
==test_colors_constants:13
==test_grid:13
==test_input:14
==test_line:13
==test_objects:13
==test_sound:15
try:
    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui
 (duplicate-code)
R:  1, 0: Similar lines in 3 files
==RiceRocks_Asteroids:31
==Spaceship_prototype:28
==test_image:16
    from user33_Bhc7VzXKbXGVQV1 import FPS
    from user40_nMs7JxzimyImAv2 import Loader

    import simplegui

    SIMPLEGUICS2PYGAME = False
except ImportError: (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:656
==Spaceship_prototype:128
        self._center = list(center)
        self._size = list(size)
        self._radius = (max(size) if radius is None
                        else radius)
        self._lifespan = (lifespan if lifespan
                          else float('inf'))
        self._animated = animated (duplicate-code)
R:  1, 0: Similar lines in 2 files
==test_simpleplot_bars:41
==test_simpleplot_scatter:41
                            (datalist, dataset),
                            ('datalist', 'dataset'),
                            _filename=filename)

if SIMPLEGUICS2PYGAME and (len(argv) != 2):
    simpleplot._block()  # pylint: disable=protected-access (duplicate-code)
R:  1, 0: Similar lines in 3 files
==test_colors_constants:77
==test_grid:171
==test_image:163
FRAME.add_label(TEST)
FRAME.add_label('')
FRAME.add_label(PYTHON_VERSION)
FRAME.add_label(GUI_VERSION)
FRAME.add_label(PYGAME_VERSION)
FRAME.add_label('') (duplicate-code)
R:  1, 0: Similar lines in 5 files
==test_button_label:57
==test_colors_html_hsla:99
==test_colors_html_rgba:100
==test_input:76
==test_line:101
    frame.add_label(TEST)
    frame.add_label('')
    frame.add_label(PYTHON_VERSION)
    frame.add_label(GUI_VERSION)
    frame.add_label(PYGAME_VERSION)
    frame.add_label('') (duplicate-code)
R:  1, 0: Similar lines in 2 files
==loader:43
==test_image:66
    canvas.draw_image(img,
                      (img.get_width() / 2, img.get_height() / 2),
                      (img.get_width(), img.get_height()),
                      (img.get_width() / 2, img.get_height() / 2),
                      (img.get_width(), img.get_height()))
 (duplicate-code)
R:  1, 0: Similar lines in 6 files
==Blackjack:18
==Frame_example:14
==Nostalgic_Basic_Blitz:20
==Pong:19
==Stopwatch:17
==stop_example:13
try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

    simplegui.Frame._hide_status = True  # pylint: disable=protected-access (duplicate-code)
R:  1, 0: Similar lines in 4 files
==test_colors_constants:77
==test_grid:171
==test_image:163
==test_objects:74
FRAME.add_label(TEST)
FRAME.add_label('')
FRAME.add_label(PYTHON_VERSION)
FRAME.add_label(GUI_VERSION)
FRAME.add_label(PYGAME_VERSION) (duplicate-code)
R:  1, 0: Similar lines in 2 files
==RiceRocks_Asteroids:733
==Spaceship_prototype:200
        assert_position(position)
        assert_position(velocity)
        assert isinstance(angle, int) or isinstance(angle, float), type(angle)
        assert (isinstance(angle_velocity, int) or
                isinstance(angle_velocity, float)), type(angle_velocity) (duplicate-code)


Report
======
6103 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |64     |64         |=          |100.00      |15.62    |
+---------+-------+-----------+-----------+------------+---------+
|class    |38     |38         |=          |92.11       |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|method   |277    |277        |=          |88.09       |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|function |196    |197        |-1.00      |83.16       |0.51     |
+---------+-------+-----------+-----------+------------+---------+



External dependencies
---------------------
::

    PIL 
      \-Image (test_all)
      \-ImageChops (test_all)
      \-ImageStat (test_all)
    SimpleGUICS2Pygame (test_input,test_all,test_colors_html,test_colors_html_hsla,test_colors_constants,test_circle,test_button_label,test_image,test_objects,SimpleGUICS2Pygame_check,test_line,SimpleGUICS2Pygame.simplegui_lib_draw,test_grid,setup,test_colors_html_rgba,presentation,test_text)
      \-codeskulptor (SimpleGUICS2Pygame_check,test_dir)
      \-codeskulptor_lib (Mandelbrot_Set,test_colors_html,test_colors_html_hsla,Memory,SimpleGUICS2Pygame_check,Spaceship_prototype,test_colors_html_rgba,RiceRocks_Asteroids)
      \-numeric (SimpleGUICS2Pygame_check,test_dir,test_numeric)
      \-simplegui_lib (SimpleGUICS2Pygame_check)
      \-simplegui_lib_draw (SimpleGUICS2Pygame_check,test_text,Memory,SimpleGUICS2Pygame.simplegui_lib)
      \-simplegui_lib_fps (RiceRocks_Asteroids,Spaceship_prototype,test_image,SimpleGUICS2Pygame_check,SimpleGUICS2Pygame.simplegui_lib)
      \-simplegui_lib_keys (SimpleGUICS2Pygame_check,keys,SimpleGUICS2Pygame.simplegui_lib)
      \-simplegui_lib_loader (loader,SimpleGUICS2Pygame.simplegui_lib,test_image,SimpleGUICS2Pygame_check,Spaceship_prototype,RiceRocks_Asteroids)
      \-simpleguics2pygame (loader,Frame_example,test_colors_html_hsla,test_image,SimpleGUICS2Pygame.simplegui_lib_keys,test_objects,Nostalgic_Basic_Blitz,test_grid,presentation,test_text,test_command_line_options,SimpleGUICS2Pygame.simplegui_lib_loader,test_colors_constants,Stress_Balls_reverse,test_colors_html_rgba,stop_example,test_colors_html,SimpleGUICS2Pygame.simplegui_lib_fps,test_circle,Memory,test_sound,SimpleGUICS2Pygame_check,Spaceship_prototype,SimpleGUICS2Pygame.simpleguics2pygame._fonts,test_dir,test_line,Stress_Balls_average,keys,Blackjack,Mandelbrot_Set,Pong,test_all,Stress_Balls,test_button_label,Stopwatch,test_input,RiceRocks_Asteroids)
      | \-_colors (SimpleGUICS2Pygame.simpleguics2pygame.frame,SimpleGUICS2Pygame.simpleguics2pygame.control,SimpleGUICS2Pygame.simpleguics2pygame.canvas)
      | \-_fonts (SimpleGUICS2Pygame.simpleguics2pygame.frame,SimpleGUICS2Pygame.simpleguics2pygame.control,SimpleGUICS2Pygame.simpleguics2pygame.canvas)
      | \-_media (SimpleGUICS2Pygame.simpleguics2pygame.image,SimpleGUICS2Pygame.simpleguics2pygame.sound)
      | \-_options (SimpleGUICS2Pygame.simpleguics2pygame)
      | \-_pygame_lib (SimpleGUICS2Pygame.simpleguics2pygame._media,SimpleGUICS2Pygame.simpleguics2pygame._colors)
      | \-canvas (SimpleGUICS2Pygame.simpleguics2pygame.frame)
      | \-control (SimpleGUICS2Pygame.simpleguics2pygame.frame)
      | \-frame (SimpleGUICS2Pygame.simpleguics2pygame._media,SimpleGUICS2Pygame.simpleguics2pygame._colors,SimpleGUICS2Pygame.simpleguics2pygame.control,SimpleGUICS2Pygame.simpleguics2pygame._fonts,SimpleGUICS2Pygame.simpleguics2pygame._options,SimpleGUICS2Pygame.simpleguics2pygame.canvas)
      | \-image (SimpleGUICS2Pygame.simpleguics2pygame.frame,SimpleGUICS2Pygame.simpleguics2pygame.canvas)
      | \-keys (SimpleGUICS2Pygame.simpleguics2pygame.frame)
      | \-sound (SimpleGUICS2Pygame.simpleguics2pygame._media,SimpleGUICS2Pygame.simpleguics2pygame._options)
      | \-timer (SimpleGUICS2Pygame.simpleguics2pygame.frame)
      \-simpleplot (test_simpleplot_lines,Stress_Balls_results,Stress_Balls,Stress_Balls_reverse,test_simpleplot_scatter,SimpleGUICS2Pygame_check,test_dir,Stress_Balls_average,test_simpleplot_bars)
    matplotlib (SimpleGUICS2Pygame_check,SimpleGUICS2Pygame.simpleplot)
      \-pyplot (SimpleGUICS2Pygame.simpleplot)
    pygame (SimpleGUICS2Pygame.simpleguics2pygame._media,SimpleGUICS2Pygame.simpleguics2pygame.image,SimpleGUICS2Pygame.simpleguics2pygame._colors,SimpleGUICS2Pygame.simpleguics2pygame.sound,SimpleGUICS2Pygame.simpleguics2pygame.control,pygame_check,SimpleGUICS2Pygame_check,SimpleGUICS2Pygame.simpleguics2pygame._fonts,SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib,SimpleGUICS2Pygame.simpleguics2pygame.frame,SimpleGUICS2Pygame.simpleguics2pygame._options,SimpleGUICS2Pygame.simpleguics2pygame.canvas)
      \-font (SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib)
      \-mixer (SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib)
      \-transform (SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib)
      \-version (test_input,test_colors_html,test_colors_html_hsla,test_colors_constants,test_circle,test_button_label,test_image,test_line,test_grid,SimpleGUICS2Pygame.simpleguics2pygame._pygame_lib,test_colors_html_rgba,test_text)
    setuptools (setup)



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |8025   |49.09 |8029     |-4.00      |
+----------+-------+------+---------+-----------+
|docstring |4688   |28.68 |4689     |-1.00      |
+----------+-------+------+---------+-----------+
|comment   |709    |4.34  |711      |-2.00      |
+----------+-------+------+---------+-----------+
|empty     |2925   |17.89 |2924     |+1.00      |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+-------+---------+-----------+
|                         |now    |previous |difference |
+=========================+=======+=========+===========+
|nb duplicated lines      |2544   |2634     |-90.00     |
+-------------------------+-------+---------+-----------+
|percent duplicated lines |15.722 |16.272   |-0.55      |
+-------------------------+-------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |95     |95       |=          |
+-----------+-------+---------+-----------+
|refactor   |69     |74       |-5.00      |
+-----------+-------+---------+-----------+
|warning    |70     |70       |=          |
+-----------+-------+---------+-----------+
|error      |1      |6        |-5.00      |
+-----------+-------+---------+-----------+



% errors / warnings by module
-----------------------------

+---------------------------------------------+-------+--------+---------+-----------+
|module                                       |error  |warning |refactor |convention |
+=============================================+=======+========+=========+===========+
|test_sound                                   |100.00 |0.00    |0.00     |2.11       |
+---------------------------------------------+-------+--------+---------+-----------+
|Stress_Balls_average                         |0.00   |35.71   |2.90     |24.21      |
+---------------------------------------------+-------+--------+---------+-----------+
|Stress_Balls                                 |0.00   |34.29   |2.90     |24.21      |
+---------------------------------------------+-------+--------+---------+-----------+
|Stress_Balls_reverse                         |0.00   |28.57   |88.41    |24.21      |
+---------------------------------------------+-------+--------+---------+-----------+
|Stress_Balls_results                         |0.00   |1.43    |1.45     |0.00       |
+---------------------------------------------+-------+--------+---------+-----------+
|test_numeric                                 |0.00   |0.00    |4.35     |11.58      |
+---------------------------------------------+-------+--------+---------+-----------+
|test_simpleplot_scatter                      |0.00   |0.00    |0.00     |4.21       |
+---------------------------------------------+-------+--------+---------+-----------+
|test_simpleplot_lines                        |0.00   |0.00    |0.00     |4.21       |
+---------------------------------------------+-------+--------+---------+-----------+
|test_simpleplot_bars                         |0.00   |0.00    |0.00     |4.21       |
+---------------------------------------------+-------+--------+---------+-----------+
|SimpleGUICS2Pygame.simpleguics2pygame.canvas |0.00   |0.00    |0.00     |1.05       |
+---------------------------------------------+-------+--------+---------+-----------+



Messages
--------

+-------------------------------+------------+
|message id                     |occurrences |
+===============================+============+
|missing-docstring              |69          |
+-------------------------------+------------+
|duplicate-code                 |51          |
+-------------------------------+------------+
|global-variable-undefined      |36          |
+-------------------------------+------------+
|invalid-name                   |23          |
+-------------------------------+------------+
|attribute-defined-outside-init |12          |
+-------------------------------+------------+
|protected-access               |9           |
+-------------------------------+------------+
|cyclic-import                  |8           |
+-------------------------------+------------+
|broad-except                   |7           |
+-------------------------------+------------+
|global-statement               |6           |
+-------------------------------+------------+
|too-many-instance-attributes   |3           |
+-------------------------------+------------+
|too-many-arguments             |3           |
+-------------------------------+------------+
|consider-using-enumerate       |3           |
+-------------------------------+------------+
|too-many-statements            |1           |
+-------------------------------+------------+
|too-many-locals                |1           |
+-------------------------------+------------+
|too-many-branches              |1           |
+-------------------------------+------------+
|redefined-variable-type        |1           |
+-------------------------------+------------+
|no-member                      |1           |
+-------------------------------+------------+



Global evaluation
-----------------
Your code has been rated at 9.61/10 (previous run: 9.56/10, +0.05)


===== mypy =====
SimpleGUICS2Pygame/simpleguics2pygame/timer.py:36: error: Need type annotation for '_timers_running'
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:22: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:108: error: Incompatible types in assignment (expression has type "Dict[int, int]", target has type "Tuple[Dict[int, int], Dict[int, int]]")
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:112: error: Incompatible types in assignment (expression has type "List[int]", variable has type "Set[int]")
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:113: error: "Set[int]" has no attribute "sort"
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:123: error: "Tuple[Dict[int, int], Dict[int, int]]" has no attribute "keys"
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_results.py:141: error: "Tuple[Dict[int, int], Dict[int, int]]" has no attribute "get"
SimpleGUICS2Pygame/test/test_simpleplot_scatter.py:20: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_simpleplot_lines.py:20: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_simpleplot_bars.py:20: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_numeric.py:19: error: Name 'numeric' already defined (possibly by an import)
SimpleGUICS2Pygame/simpleguics2pygame/_options.py:20: error: Need type annotation for '__all__'
SimpleGUICS2Pygame/simpleguics2pygame/_media.py:30: error: Name 'urlsplit' already defined on line 134
SimpleGUICS2Pygame/simpleguics2pygame/_media.py:31: error: Name 'urlopen' already defined on line 19
SimpleGUICS2Pygame/simpleguics2pygame/_media.py:34: error: Need type annotation for '__all__'
SimpleGUICS2Pygame/simpleguics2pygame/_fonts.py:20: error: Need type annotation for '__all__'
SimpleGUICS2Pygame/simpleguics2pygame/_colors.py:20: error: Need type annotation for '__all__'
SimpleGUICS2Pygame/simpleguics2pygame/frame.py:128: error: Need type annotation for '_pygamecolors_cached'
SimpleGUICS2Pygame/simpleguics2pygame/frame.py:133: error: Need type annotation for '_pygamefonts_cached'
SimpleGUICS2Pygame/simpleguics2pygame/frame.py:139: error: Need type annotation for '_pygamemedias_cached'
SimpleGUICS2Pygame/simpleguics2pygame/frame.py:158: error: Need type annotation for '_save_canvas_requests'
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_reverse.py:28: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_reverse.py:29: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_reverse.py:78: error: Need type annotation for 'results'
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_reverse.py:349: error: "Type[Frame]" has no attribute "_stop_timers"
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_average.py:28: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_average.py:29: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_average.py:78: error: Need type annotation for 'results'
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls_average.py:349: error: "Type[Frame]" has no attribute "_stop_timers"
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls.py:28: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls.py:29: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls.py:78: error: Need type annotation for 'results'
SimpleGUICS2Pygame/example/Stress_Balls/Stress_Balls.py:349: error: "Type[Frame]" has no attribute "_stop_timers"
SimpleGUICS2Pygame/test/test_text.py:24: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_sound.py:21: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_objects.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_line.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_input.py:20: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_grid.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_dir.py:24: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_dir.py:25: error: Name 'codeskulptor' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_dir.py:26: error: Name 'numeric' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_dir.py:27: error: Name 'simpleplot' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_colors_html_rgba.py:23: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_colors_html_hsla.py:26: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_colors_html.py:23: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_colors_constants.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_circle.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_button_label.py:20: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_all.py:34: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_all.py:39: error: Incompatible import of "escape" (imported name has type "Callable[[str, bool], str]", local name has type "Callable[[AnyStr, bool], AnyStr]")
SimpleGUICS2Pygame/example/stop_example.py:17: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/stop_example.py:20: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/example/presentation.py:22: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/presentation.py:42: error: All conditional function variants must have identical signatures
SimpleGUICS2Pygame/example/Stopwatch.py:21: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Stopwatch.py:24: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/example/Pong.py:23: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Pong.py:26: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/example/Nostalgic_Basic_Blitz.py:24: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Memory.py:27: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Mandelbrot_Set.py:30: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Frame_example.py:18: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Blackjack.py:22: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Blackjack.py:25: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/simplegui_lib_keys.py:19: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_image.py:27: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/test/test_image.py:32: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/example/loader.py:24: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/keys.py:22: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Spaceship_prototype.py:40: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/Spaceship_prototype.py:43: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
SimpleGUICS2Pygame/example/RiceRocks_Asteroids.py:43: error: Name 'simplegui' already defined (possibly by an import)
SimpleGUICS2Pygame/example/RiceRocks_Asteroids.py:46: error: Incompatible types in assignment (expression has type "bool", variable has type "None")
